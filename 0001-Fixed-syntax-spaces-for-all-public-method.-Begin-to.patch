From 02e017512050c7cf05af9e03507d27d3fe323ae0 Mon Sep 17 00:00:00 2001
From: cancuengt <mario@ubuntu.ubuntu-domain>
Date: Wed, 10 Mar 2010 00:19:26 -0600
Subject: [PATCH] Fixed syntax spaces for all public method. Begin to put phpDocBlock

---
 index.php    |    3 +
 src/fpdf.php |  880 ++++++++++++++++++++++++++++++++--------------------------
 2 files changed, 486 insertions(+), 397 deletions(-)
 create mode 100644 index.php

diff --git a/index.php b/index.php
new file mode 100644
index 0000000..33a7a47
--- /dev/null
+++ b/index.php
@@ -0,0 +1,3 @@
+
+FPDF
+
diff --git a/src/fpdf.php b/src/fpdf.php
index 1b4761f..3603e41 100644
--- a/src/fpdf.php
+++ b/src/fpdf.php
@@ -1,16 +1,33 @@
 <?php
-/*******************************************************************************
- * FPDF                                                                         *
- *                                                                              *
- * Version: 1.6                                                                 *
- * Date:    2008-08-03                                                          *
- * Author:  Olivier PLATHEY                                                     *
- *******************************************************************************/
 
+/**
+ * FPDF Library. php PDF Generator
+ *
+ * @category   Model
+ * @package    FPDF
+ * @author     Olivier Plathey
+ * @copyright  2008 Olivier Plathey
+ * @license    http://fpdf.org public
+ * @link       http://fpdf.org
+ * @version    1.6, 2008-08-03
+ */
+
+/**
+ * FPDF
+ *
+ * @category   Model
+ * @author     Olivier Plathey
+ * @copyright  2008 Olivier Plathey
+ * @license    http://fpdf.org public
+ * @link       http://fpdf.org
+ * @version    1.6, 2008-08-03
+ *
+ */
 define('FPDF_VERSION','1.6');
 
 class FPDF
 {
+
     var $page;               //current page number
     var $n;                  //current object number
     var $offsets;            //array of object offsets
@@ -72,147 +89,184 @@ class FPDF
      *                               Public methods                                 *
      *                                                                              *
      *******************************************************************************/
-    function FPDF($orientation='P', $unit='mm', $format='A4')
+
+
+    /**
+     * Constructor
+     *
+     * @param string orientation
+     * @param string unit
+     * @param string format
+     * @return void
+     */
+    public function FPDF($orientation='P', $unit='mm', $format='A4')
     {
         //Some checks
         $this->_dochecks();
+
         //Initialization of properties
-        $this->page=0;
-        $this->n=2;
-        $this->buffer='';
-        $this->pages=array();
-        $this->PageSizes=array();
-        $this->state=0;
-        $this->fonts=array();
-        $this->FontFiles=array();
-        $this->diffs=array();
-        $this->images=array();
-        $this->links=array();
-        $this->InHeader=false;
-        $this->InFooter=false;
-        $this->lasth=0;
-        $this->FontFamily='';
-        $this->FontStyle='';
-        $this->FontSizePt=12;
-        $this->underline=false;
-        $this->DrawColor='0 G';
-        $this->FillColor='0 g';
-        $this->TextColor='0 g';
-        $this->ColorFlag=false;
-        $this->ws=0;
+        $this->page       = 0;
+        $this->n          = 2;
+        $this->buffer     = '';
+        $this->pages      = array();
+        $this->PageSizes  = array();
+        $this->state      = 0;
+        $this->fonts      = array();
+        $this->FontFiles  = array();
+        $this->diffs      = array();
+        $this->images     = array();
+        $this->links      = array();
+        $this->InHeader   = false;
+        $this->InFooter   = false;
+        $this->lasth      = 0;
+        $this->FontFamily = '';
+        $this->FontStyle  = '';
+        $this->FontSizePt = 12;
+        $this->underline  = false;
+        $this->DrawColor  = '0 G';
+        $this->FillColor  = '0 g';
+        $this->TextColor  = '0 g';
+        $this->ColorFlag  = false;
+        $this->ws         = 0;
+
         //Standard fonts
-        $this->CoreFonts=array('courier'=>'Courier', 'courierB'=>'Courier-Bold', 'courierI'=>'Courier-Oblique', 'courierBI'=>'Courier-BoldOblique',
-		'helvetica'=>'Helvetica', 'helveticaB'=>'Helvetica-Bold', 'helveticaI'=>'Helvetica-Oblique', 'helveticaBI'=>'Helvetica-BoldOblique',
-		'times'=>'Times-Roman', 'timesB'=>'Times-Bold', 'timesI'=>'Times-Italic', 'timesBI'=>'Times-BoldItalic',
-		'symbol'=>'Symbol', 'zapfdingbats'=>'ZapfDingbats');
+        $this->CoreFonts=array(
+            'courier'      => 'Courier',
+            'courierB'     => 'Courier-Bold',
+            'courierI'     => 'Courier-Oblique',
+            'courierBI'    => 'Courier-BoldOblique',
+            'helvetica'    => 'Helvetica',
+            'helveticaB'   => 'Helvetica-Bold',
+            'helveticaI'   => 'Helvetica-Oblique',
+            'helveticaBI'  => 'Helvetica-BoldOblique',
+            'times'        => 'Times-Roman',
+            'timesB'       => 'Times-Bold',
+            'timesI'       => 'Times-Italic',
+            'timesBI'      => 'Times-BoldItalic',
+            'symbol'       => 'Symbol',
+            'zapfdingbats' => 'ZapfDingbats',
+        );
+
         //Scale factor
-        if($unit=='pt') {
-            $this->k=1;
-        } elseif($unit=='mm') {
-            $this->k=72/25.4;
-        } elseif($unit=='cm') {
-            $this->k=72/2.54;
-        } elseif($unit=='in') {
-            $this->k=72;
+        if($unit == 'pt') {
+            $this->k = 1;
+        } elseif($unit == 'mm') {
+            $this->k = 72/25.4;
+        } elseif($unit == 'cm') {
+            $this->k = 72/2.54;
+        } elseif($unit == 'in') {
+            $this->k = 72;
         } else {
             $this->Error('Incorrect unit: '.$unit);
         }
         //Page format
         $this->PageFormats = array(
-        	'a3'=>array(841.89,1190.55),
-        	'a4'=>array(595.28,841.89),
-        	'a5'=>array(420.94,595.28),
-			'letter'=>array(612,792),
-			'legal'=>array(612,1008));
+        	'a3'     => array(841.89,1190.55),
+        	'a4'     => array(595.28,841.89),
+        	'a5'     => array(420.94,595.28),
+			'letter' => array(612,792),
+			'legal'  => array(612,1008)
+        );
+
         if(is_string($format)) {
-            $format=$this->_getpageformat($format);
+            $format = $this->_getpageformat($format);
         }
 
-        $this->DefPageFormat=$format;
-        $this->CurPageFormat=$format;
+        $this->DefPageFormat = $format;
+        $this->CurPageFormat = $format;
         //Page orientation
-        $orientation=strtolower($orientation);
-        if($orientation=='p' || $orientation=='portrait') {
-            $this->DefOrientation='P';
-            $this->w=$this->DefPageFormat[0];
-            $this->h=$this->DefPageFormat[1];
-        } elseif($orientation=='l' || $orientation=='landscape') {
-            $this->DefOrientation='L';
-            $this->w=$this->DefPageFormat[1];
-            $this->h=$this->DefPageFormat[0];
+
+        $orientation = strtolower($orientation);
+        if($orientation == 'p' || $orientation == 'portrait') {
+            $this->DefOrientation = 'P';
+            $this->w              = $this->DefPageFormat[0];
+            $this->h              = $this->DefPageFormat[1];
+        } elseif($orientation == 'l' || $orientation == 'landscape') {
+            $this->DefOrientation = 'L';
+            $this->w              = $this->DefPageFormat[1];
+            $this->h              = $this->DefPageFormat[0];
         } else {
             $this->Error('Incorrect orientation: '.$orientation);
         }
-        $this->CurOrientation=$this->DefOrientation;
-        $this->wPt=$this->w*$this->k;
-        $this->hPt=$this->h*$this->k;
+
+        $this->CurOrientation = $this->DefOrientation;
+        $this->wPt            = $this->w*$this->k;
+        $this->hPt            = $this->h*$this->k;
+
         //Page margins (1 cm)
-        $margin=28.35/$this->k;
+        $margin = 28.35/$this->k;
         $this->SetMargins($margin,$margin);
+
         //Interior cell margin (1 mm)
-        $this->cMargin=$margin/10;
+        $this->cMargin = $margin/10;
+
         //Line width (0.2 mm)
-        $this->LineWidth=.567/$this->k;
+        $this->LineWidth = 0.567/$this->k;
+
         //Automatic page break
         $this->SetAutoPageBreak(true,2*$margin);
+
         //Full width display mode
         $this->SetDisplayMode('fullwidth');
+
         //Enable compression
         $this->SetCompression(true);
+
         //Set default PDF version number
-        $this->PDFVersion='1.3';
+        $this->PDFVersion = '1.3';
     }
 
     function SetMargins($left, $top, $right=null)
     {
         //Set left, top and right margins
-        $this->lMargin=$left;
-        $this->tMargin=$top;
-        if($right===null) {
-            $right=$left;
+        $this->lMargin = $left;
+        $this->tMargin = $top;
+        if($right === null) {
+            $right = $left;
         }
-        $this->rMargin=$right;
+        $this->rMargin = $right;
     }
 
     function SetLeftMargin($margin)
     {
         //Set left margin
-        $this->lMargin=$margin;
-        if($this->page>0 && $this->x<$margin) {
-            $this->x=$margin;
+        $this->lMargin = $margin;
+        if($this->page > 0 && $this->x < $margin) {
+            $this->x = $margin;
         }
     }
 
     function SetTopMargin($margin)
     {
         //Set top margin
-        $this->tMargin=$margin;
+        $this->tMargin = $margin;
     }
 
     function SetRightMargin($margin)
     {
         //Set right margin
-        $this->rMargin=$margin;
+        $this->rMargin = $margin;
     }
 
     function SetAutoPageBreak($auto, $margin=0)
     {
         //Set auto page break mode and triggering margin
-        $this->AutoPageBreak=$auto;
-        $this->bMargin=$margin;
-        $this->PageBreakTrigger=$this->h-$margin;
+        $this->AutoPageBreak    = $auto;
+        $this->bMargin          = $margin;
+        $this->PageBreakTrigger = $this->h-$margin;
     }
 
     function SetDisplayMode($zoom, $layout='continuous')
     {
         //Set display mode in viewer
-        if($zoom=='fullpage' || $zoom=='fullwidth' || $zoom=='real' || $zoom=='default' || !is_string($zoom)) {
-            $this->ZoomMode=$zoom;
+        if($zoom == 'fullpage' || $zoom == 'fullwidth' || $zoom == 'real' || $zoom == 'default' || !is_string($zoom)) {
+            $this->ZoomMode = $zoom;
         } else {
             $this->Error('Incorrect zoom display mode: '.$zoom);
         }
+
         if($layout=='single' || $layout=='continuous' || $layout=='two' || $layout=='default') {
-            $this->LayoutMode=$layout;
+            $this->LayoutMode = $layout;
         } else {
             $this->Error('Incorrect layout display mode: '.$layout);
         }
@@ -222,7 +276,7 @@ class FPDF
     {
         //Set page compression
         if(function_exists('gzcompress')) {
-            $this->compress=$compress;
+            $this->compress = $compress;
         } else {
             $this->compress=false;
         }
@@ -232,7 +286,7 @@ class FPDF
     {
         //Title of document
         if($isUTF8) {
-            $title=$this->_UTF8toUTF16($title);
+            $title = $this->_UTF8toUTF16($title);
         }
         $this->title=$title;
     }
@@ -241,43 +295,43 @@ class FPDF
     {
         //Subject of document
         if($isUTF8) {
-            $subject=$this->_UTF8toUTF16($subject);
+            $subject = $this->_UTF8toUTF16($subject);
         }
-        $this->subject=$subject;
+        $this->subject = $subject;
     }
 
     function SetAuthor($author, $isUTF8=false)
     {
         //Author of document
         if($isUTF8) {
-            $author=$this->_UTF8toUTF16($author);
+            $author = $this->_UTF8toUTF16($author);
         }
 
-        $this->author=$author;
+        $this->author = $author;
     }
 
     function SetKeywords($keywords, $isUTF8=false)
     {
         //Keywords of document
         if($isUTF8) {
-            $keywords=$this->_UTF8toUTF16($keywords);
+            $keywords = $this->_UTF8toUTF16($keywords);
         }
-        $this->keywords=$keywords;
+        $this->keywords = $keywords;
     }
 
     function SetCreator($creator, $isUTF8=false)
     {
         //Creator of document
         if($isUTF8) {
-            $creator=$this->_UTF8toUTF16($creator);
+            $creator = $this->_UTF8toUTF16($creator);
         }
-        $this->creator=$creator;
+        $this->creator = $creator;
     }
 
     function AliasNbPages($alias='{nb}')
     {
         //Define an alias for total number of pages
-        $this->AliasNbPages=$alias;
+        $this->AliasNbPages = $alias;
     }
 
     function Error($msg)
@@ -289,24 +343,24 @@ class FPDF
     function Open()
     {
         //Begin document
-        $this->state=1;
+        $this->state = 1;
     }
 
     function Close()
     {
         //Terminate document
-        if($this->state==3) {
+        if($this->state == 3) {
             return;
         }
 
-        if($this->page==0) {
+        if($this->page == 0) {
             $this->AddPage();
         }
 
         //Page footer
-        $this->InFooter=true;
+        $this->InFooter = true;
         $this->Footer();
-        $this->InFooter=false;
+        $this->InFooter = false;
         //Close page
         $this->_endpage();
         //Close document
@@ -316,75 +370,82 @@ class FPDF
     function AddPage($orientation='', $format='')
     {
         //Start a new page
-        if($this->state==0) {
+        if($this->state == 0) {
             $this->Open();
         }
 
-        $family=$this->FontFamily;
-        $style=$this->FontStyle.($this->underline ? 'U' : '');
-        $size=$this->FontSizePt;
-        $lw=$this->LineWidth;
-        $dc=$this->DrawColor;
-        $fc=$this->FillColor;
-        $tc=$this->TextColor;
-        $cf=$this->ColorFlag;
-        if($this->page>0) {
+        $family = $this->FontFamily;
+        $style  = $this->FontStyle.($this->underline ? 'U' : '');
+        $size   = $this->FontSizePt;
+        $lw     = $this->LineWidth;
+        $dc     = $this->DrawColor;
+        $fc     = $this->FillColor;
+        $tc     = $this->TextColor;
+        $cf     = $this->ColorFlag;
+        if($this->page > 0) {
             //Page footer
-            $this->InFooter=true;
+            $this->InFooter = true;
             $this->Footer();
-            $this->InFooter=false;
+            $this->InFooter = false;
             //Close page
             $this->_endpage();
         }
         //Start new page
         $this->_beginpage($orientation,$format);
+
         //Set line cap style to square
         $this->_out('2 J');
+
         //Set line width
-        $this->LineWidth=$lw;
+        $this->LineWidth = $lw;
         $this->_out(sprintf('%.2F w',$lw*$this->k));
+
         //Set font
         if($family) {
             $this->SetFont($family,$style,$size);
         }
+
         //Set colors
-        $this->DrawColor=$dc;
+        $this->DrawColor = $dc;
         if($dc!='0 G') {
             $this->_out($dc);
         }
 
-        $this->FillColor=$fc;
+        $this->FillColor = $fc;
         if($fc!='0 g') {
             $this->_out($fc);
         }
 
-        $this->TextColor=$tc;
-        $this->ColorFlag=$cf;
+        $this->TextColor = $tc;
+        $this->ColorFlag = $cf;
+
         //Page header
-        $this->InHeader=true;
+        $this->InHeader  = true;
         $this->Header();
-        $this->InHeader=false;
+        $this->InHeader = false;
+
         //Restore line width
-        if($this->LineWidth!=$lw) {
-            $this->LineWidth=$lw;
+        if($this->LineWidth != $lw) {
+            $this->LineWidth = $lw;
             $this->_out(sprintf('%.2F w',$lw*$this->k));
         }
+
         //Restore font
         if($family) {
             $this->SetFont($family,$style,$size);
         }
 
         //Restore colors
-        if($this->DrawColor!=$dc) {
-            $this->DrawColor=$dc;
+        if($this->DrawColor != $dc) {
+            $this->DrawColor = $dc;
             $this->_out($dc);
         }
-        if($this->FillColor!=$fc) {
-            $this->FillColor=$fc;
+        if($this->FillColor != $fc) {
+            $this->FillColor = $fc;
             $this->_out($fc);
         }
-        $this->TextColor=$tc;
-        $this->ColorFlag=$cf;
+        $this->TextColor = $tc;
+        $this->ColorFlag = $cf;
     }
 
     function Header()
@@ -406,10 +467,10 @@ class FPDF
     function SetDrawColor($r, $g=null, $b=null)
     {
         //Set color for all stroking operations
-        if(($r==0 && $g==0 && $b==0) || $g===null) {
-            $this->DrawColor=sprintf('%.3F G',$r/255);
+        if(($r == 0 && $g == 0 && $b == 0) || $g === null) {
+            $this->DrawColor = sprintf('%.3F G',$r/255);
         } else {
-            $this->DrawColor=sprintf('%.3F %.3F %.3F RG',$r/255,$g/255,$b/255);
+            $this->DrawColor = sprintf('%.3F %.3F %.3F RG',$r/255,$g/255,$b/255);
         }
         if($this->page>0) {
             $this->_out($this->DrawColor);
@@ -419,13 +480,13 @@ class FPDF
     function SetFillColor($r, $g=null, $b=null)
     {
         //Set color for all filling operations
-        if(($r==0 && $g==0 && $b==0) || $g===null) {
-            $this->FillColor=sprintf('%.3F g',$r/255);
+        if(($r == 0 && $g == 0 && $b == 0) || $g === null) {
+            $this->FillColor = sprintf('%.3F g',$r/255);
         } else {
-            $this->FillColor=sprintf('%.3F %.3F %.3F rg',$r/255,$g/255,$b/255);
+            $this->FillColor = sprintf('%.3F %.3F %.3F rg',$r/255,$g/255,$b/255);
         }
 
-        $this->ColorFlag=($this->FillColor!=$this->TextColor);
+        $this->ColorFlag = ($this->FillColor != $this->TextColor);
         if($this->page>0) {
             $this->_out($this->FillColor);
         }
@@ -434,23 +495,23 @@ class FPDF
     function SetTextColor($r, $g=null, $b=null)
     {
         //Set color for text
-        if(($r==0 && $g==0 && $b==0) || $g===null) {
-            $this->TextColor=sprintf('%.3F g',$r/255);
+        if(($r == 0 && $g == 0 && $b == 0) || $g === null) {
+            $this->TextColor = sprintf('%.3F g',$r/255);
         } else {
-            $this->TextColor=sprintf('%.3F %.3F %.3F rg',$r/255,$g/255,$b/255);
+            $this->TextColor = sprintf('%.3F %.3F %.3F rg',$r/255,$g/255,$b/255);
         }
-        $this->ColorFlag=($this->FillColor!=$this->TextColor);
+        $this->ColorFlag = ($this->FillColor != $this->TextColor);
     }
 
     function GetStringWidth($s)
     {
         //Get width of a string in the current font
-        $s=(string)$s;
-        $cw=&$this->CurrentFont['cw'];
-        $w=0;
-        $l=strlen($s);
-        for($i=0;$i<$l;$i++) {
-            $w+=$cw[$s[$i]];
+        $s  = (string)$s;
+        $cw = &$this->CurrentFont['cw'];
+        $w  = 0;
+        $l  = strlen($s);
+        for($i = 0;$i < $l;$i++) {
+            $w+= $cw[$s[$i]];
         }
         return $w*$this->FontSize/1000;
     }
@@ -458,7 +519,7 @@ class FPDF
     function SetLineWidth($width)
     {
         //Set line width
-        $this->LineWidth=$width;
+        $this->LineWidth = $width;
         if($this->page>0) {
             $this->_out(sprintf('%.2F w',$width*$this->k));
         }
@@ -473,12 +534,12 @@ class FPDF
     function Rect($x, $y, $w, $h, $style='')
     {
         //Draw a rectangle
-        if($style=='F') {
-            $op='f';
-        } elseif($style=='FD' || $style=='DF') {
-            $op='B';
+        if($style == 'F') {
+            $op = 'f';
+        } elseif($style == 'FD' || $style == 'DF') {
+            $op = 'B';
         } else {
-            $op='S';
+            $op = 'S';
         }
         $this->_out(sprintf('%.2F %.2F %.2F %.2F re %s',$x*$this->k,($this->h-$y)*$this->k,$w*$this->k,-$h*$this->k,$op));
     }
@@ -487,49 +548,59 @@ class FPDF
     {
         //Add a TrueType or Type1 font
         $family=strtolower($family);
-        if($file=='') {
+
+        if($file == '') {
             $file=str_replace(' ','',$family).strtolower($style).'.php';
         }
-        if($family=='arial') {
-            $family='helvetica';
+
+        if($family == 'arial') {
+            $family = 'helvetica';
         }
+
         $style=strtoupper($style);
-        if($style=='IB') {
-            $style='BI';
+        if($style == 'IB') {
+            $style = 'BI';
         }
+
         $fontkey=$family.$style;
         if(isset($this->fonts[$fontkey])) {
             return;
         }
+
         include($this->_getfontpath().$file);
         if(!isset($name)) {
             $this->Error('Could not include font definition file');
         }
-        $i=count($this->fonts)+1;
+
+        $i = count($this->fonts)+1;
+
         $this->fonts[$fontkey]=array('i'=>$i, 'type'=>$type, 'name'=>$name, 'desc'=>$desc, 'up'=>$up, 'ut'=>$ut, 'cw'=>$cw, 'enc'=>$enc, 'file'=>$file);
         if($diff) {
             //Search existing encodings
-            $d=0;
-            $nb=count($this->diffs);
-            for($i=1;$i<=$nb;$i++) {
-                if($this->diffs[$i]==$diff) {
-                    $d=$i;
+            $d  = 0;
+            $nb = count($this->diffs);
+            for($i = 1;$i <= $nb;$i++){
+                if($this->diffs[$i] == $diff){
+                    $d = $i;
                     break;
                 }
             }
-            if($d==0) {
-                $d=$nb+1;
+
+            if($d == 0){
+                $d = $nb+1;
                 $this->diffs[$d]=$diff;
             }
             $this->fonts[$fontkey]['diff']=$d;
         }
-        if($file) {
-            if($type=='TrueType') {
-                $this->FontFiles[$file]=array('length1'=>$originalsize);
-            } else {
-                $this->FontFiles[$file]=array('length1'=>$size1, 'length2'=>$size2);
+
+        if($file){
+            if($type == 'TrueType') {
+                $this->FontFiles[$file] = array('length1'=>$originalsize);
+            }else{
+                $this->FontFiles[$file] = array('length1'=>$size1, 'length2'=>$size2);
             }
         }
+
     }
 
     function SetFont($family, $style='', $size=0)
@@ -538,43 +609,43 @@ class FPDF
         global $fpdf_charwidths;
 
         $family=strtolower($family);
-        if($family=='') {
-            $family=$this->FontFamily;
+        if($family == '') {
+            $family = $this->FontFamily;
         }
 
-        if($family=='arial') {
-            $family='helvetica';
-        } elseif($family=='symbol' || $family=='zapfdingbats') {
-            $style='';
+        if($family == 'arial') {
+            $family = 'helvetica';
+        } elseif($family == 'symbol' || $family == 'zapfdingbats') {
+            $style = '';
         }
 
-        $style=strtoupper($style);
-        if(strpos($style,'U')!==false) {
-            $this->underline=true;
-            $style=str_replace('U','',$style);
+        $style = strtoupper($style);
+        if(strpos($style,'U') !== false) {
+            $this->underline = true;
+            $style           = str_replace('U','',$style);
         } else {
-            $this->underline=false;
+            $this->underline = false;
         }
-        if($style=='IB') {
-            $style='BI';
+        if($style == 'IB') {
+            $style = 'BI';
         }
-        if($size==0) {
-            $size=$this->FontSizePt;
+        if($size == 0) {
+            $size = $this->FontSizePt;
         }
         //Test if font is already selected
-        if($this->FontFamily==$family && $this->FontStyle==$style && $this->FontSizePt==$size) {
+        if($this->FontFamily == $family && $this->FontStyle == $style && $this->FontSizePt == $size) {
             return;
         }
         //Test if used for the first time
-        $fontkey=$family.$style;
+        $fontkey = $family.$style;
         if(!isset($this->fonts[$fontkey])) {
             //Check if one of the standard fonts
             if(isset($this->CoreFonts[$fontkey])) {
                 if(!isset($fpdf_charwidths[$fontkey])) {
                     //Load metric file
-                    $file=$family;
-                    if($family=='times' || $family=='helvetica') {
-                        $file.=strtolower($style);
+                    $file = $family;
+                    if($family == 'times' || $family == 'helvetica') {
+                        $file.= strtolower($style);
                     }
 
                     include($this->_getfontpath().$file.'.php');
@@ -582,20 +653,20 @@ class FPDF
                         $this->Error('Could not include font metric file');
                     }
                 }
-                $i=count($this->fonts)+1;
-                $name=$this->CoreFonts[$fontkey];
-                $cw=$fpdf_charwidths[$fontkey];
-                $this->fonts[$fontkey]=array('i'=>$i, 'type'=>'core', 'name'=>$name, 'up'=>-100, 'ut'=>50, 'cw'=>$cw);
+                $i    = count($this->fonts)+1;
+                $name = $this->CoreFonts[$fontkey];
+                $cw   = $fpdf_charwidths[$fontkey];
+                $this->fonts[$fontkey] = array('i'=>$i, 'type'=>'core', 'name'=>$name, 'up'=>-100, 'ut'=>50, 'cw'=>$cw);
             } else {
                 $this->Error('Undefined font: '.$family.' '.$style);
             }
         }
         //Select it
-        $this->FontFamily=$family;
-        $this->FontStyle=$style;
-        $this->FontSizePt=$size;
-        $this->FontSize=$size/$this->k;
-        $this->CurrentFont=&$this->fonts[$fontkey];
+        $this->FontFamily  = $family;
+        $this->FontStyle   = $style;
+        $this->FontSizePt  = $size;
+        $this->FontSize    = $size/$this->k;
+        $this->CurrentFont = &$this->fonts[$fontkey];
         if($this->page>0) {
             $this->_out(sprintf('BT /F%d %.2F Tf ET',$this->CurrentFont['i'],$this->FontSizePt));
         }
@@ -607,8 +678,8 @@ class FPDF
         if($this->FontSizePt==$size) {
             return;
         }
-        $this->FontSizePt=$size;
-        $this->FontSize=$size/$this->k;
+        $this->FontSizePt = $size;
+        $this->FontSize   = $size/$this->k;
         if($this->page>0) {
             $this->_out(sprintf('BT /F%d %.2F Tf ET',$this->CurrentFont['i'],$this->FontSizePt));
         }
@@ -617,39 +688,39 @@ class FPDF
     function AddLink()
     {
         //Create a new internal link
-        $n=count($this->links)+1;
-        $this->links[$n]=array(0, 0);
+        $n               = count($this->links) + 1;
+        $this->links[$n] = array(0, 0);
         return $n;
     }
 
     function SetLink($link, $y=0, $page=-1)
     {
         //Set destination of internal link
-        if($y==-1) {
-            $y=$this->y;
+        if($y == -1) {
+            $y = $this->y;
         }
-        if($page==-1) {
-            $page=$this->page;
+        if($page == -1) {
+            $page = $this->page;
         }
-        $this->links[$link]=array($page, $y);
+        $this->links[$link] = array($page, $y);
     }
 
     function Link($x, $y, $w, $h, $link)
     {
         //Put a link on the page
-        $this->PageLinks[$this->page][]=array($x*$this->k, $this->hPt-$y*$this->k, $w*$this->k, $h*$this->k, $link);
+        $this->PageLinks[$this->page][] = array($x*$this->k, $this->hPt-$y*$this->k, $w*$this->k, $h*$this->k, $link);
     }
 
     function Text($x, $y, $txt)
     {
         //Output a string
-        $s=sprintf('BT %.2F %.2F Td (%s) Tj ET',$x*$this->k,($this->h-$y)*$this->k,$this->_escape($txt));
-        if($this->underline && $txt!='') {
-            $s.=' '.$this->_dounderline($x,$y,$txt);
+        $s = sprintf('BT %.2F %.2F Td (%s) Tj ET',$x*$this->k,($this->h-$y)*$this->k,$this->_escape($txt));
+        if($this->underline && $txt != '') {
+            $s.= ' '.$this->_dounderline($x,$y,$txt);
         }
 
         if($this->ColorFlag) {
-            $s='q '.$this->TextColor.' '.$s.' Q';
+            $s = 'q '.$this->TextColor.' '.$s.' Q';
         }
 
         $this->_out($s);
@@ -664,76 +735,79 @@ class FPDF
     function Cell($w, $h=0, $txt='', $border=0, $ln=0, $align='', $fill=false, $link='')
     {
         //Output a cell
-        $k=$this->k;
-        if($this->y+$h>$this->PageBreakTrigger && !$this->InHeader && !$this->InFooter && $this->AcceptPageBreak()) {
+        $k = $this->k;
+        if($this->y+$h > $this->PageBreakTrigger && !$this->InHeader && !$this->InFooter && $this->AcceptPageBreak()) {
             //Automatic page break
-            $x=$this->x;
-            $ws=$this->ws;
-            if($ws>0) {
-                $this->ws=0;
+            $x  = $this->x;
+            $ws = $this->ws;
+            if($ws > 0) {
+                $this->ws = 0;
                 $this->_out('0 Tw');
             }
             $this->AddPage($this->CurOrientation,$this->CurPageFormat);
-            $this->x=$x;
-            if($ws>0) {
-                $this->ws=$ws;
+            $this->x = $x;
+            if($ws > 0) {
+                $this->ws = $ws;
                 $this->_out(sprintf('%.3F Tw',$ws*$k));
             }
         }
-        if($w==0) {
-            $w=$this->w-$this->rMargin-$this->x;
+        if($w == 0) {
+            $w = $this->w - $this->rMargin - $this->x;
         }
 
-        $s='';
-        if($fill || $border==1) {
+        $s = '';
+        if($fill || $border == 1) {
             if($fill) {
-                $op=($border==1) ? 'B' : 'f';
+                $op = ($border == 1)? 'B' : 'f';
             } else {
-                $op='S';
+                $op = 'S';
             }
-            $s=sprintf('%.2F %.2F %.2F %.2F re %s ',$this->x*$k,($this->h-$this->y)*$k,$w*$k,-$h*$k,$op);
+            $s = sprintf('%.2F %.2F %.2F %.2F re %s ',$this->x*$k,($this->h-$this->y)*$k,$w*$k,-$h*$k,$op);
         }
         if(is_string($border)) {
-            $x=$this->x;
-            $y=$this->y;
-            if(strpos($border,'L')!==false) {
-                $s.=sprintf('%.2F %.2F m %.2F %.2F l S ',$x*$k,($this->h-$y)*$k,$x*$k,($this->h-($y+$h))*$k);
+            $x = $this->x;
+            $y = $this->y;
+
+            if(strpos($border,'L') !== false) {
+                $s.= sprintf('%.2F %.2F m %.2F %.2F l S ',$x*$k,($this->h-$y)*$k,$x*$k,($this->h-($y+$h))*$k);
             }
 
-            if(strpos($border,'T')!==false) {
-                $s.=sprintf('%.2F %.2F m %.2F %.2F l S ',$x*$k,($this->h-$y)*$k,($x+$w)*$k,($this->h-$y)*$k);
+            if(strpos($border,'T') !== false) {
+                $s.= sprintf('%.2F %.2F m %.2F %.2F l S ',$x*$k,($this->h-$y)*$k,($x+$w)*$k,($this->h-$y)*$k);
             }
 
-            if(strpos($border,'R')!==false) {
-                $s.=sprintf('%.2F %.2F m %.2F %.2F l S ',($x+$w)*$k,($this->h-$y)*$k,($x+$w)*$k,($this->h-($y+$h))*$k);
+            if(strpos($border,'R') !== false) {
+                $s.= sprintf('%.2F %.2F m %.2F %.2F l S ',($x+$w)*$k,($this->h-$y)*$k,($x+$w)*$k,($this->h-($y+$h))*$k);
             }
 
-            if(strpos($border,'B')!==false) {
+            if(strpos($border,'B') !== false) {
                 $s.=sprintf('%.2F %.2F m %.2F %.2F l S ',$x*$k,($this->h-($y+$h))*$k,($x+$w)*$k,($this->h-($y+$h))*$k);
             }
-
         }
-        if($txt!=='') {
-            if($align=='R') {
-                $dx=$w-$this->cMargin-$this->GetStringWidth($txt);
+
+        if($txt !== '') {
+            if($align == 'R') {
+                $dx = $w - $this->cMargin - $this->GetStringWidth($txt);
             } elseif($align=='C') {
-                $dx=($w-$this->GetStringWidth($txt))/2;
+                $dx = ($w - $this->GetStringWidth($txt)) / 2;
             } else {
-                $dx=$this->cMargin;
+                $dx = $this->cMargin;
             }
 
             if($this->ColorFlag) {
-                $s.='q '.$this->TextColor.' ';
+                $s.= 'q '.$this->TextColor.' ';
             }
 
-            $txt2=str_replace(')','\\)',str_replace('(','\\(',str_replace('\\','\\\\',$txt)));
-            $s.=sprintf('BT %.2F %.2F Td (%s) Tj ET',($this->x+$dx)*$k,($this->h-($this->y+.5*$h+.3*$this->FontSize))*$k,$txt2);
+            $txt2 = str_replace(')','\\)',str_replace('(','\\(',str_replace('\\','\\\\',$txt)));
+
+            $s.= sprintf('BT %.2F %.2F Td (%s) Tj ET',($this->x+$dx)*$k,($this->h-($this->y+.5*$h+.3*$this->FontSize))*$k,$txt2);
+
             if($this->underline) {
-                $s.=' '.$this->_dounderline($this->x+$dx,$this->y+.5*$h+.3*$this->FontSize,$txt);
+                $s.= ' '.$this->_dounderline($this->x+$dx,$this->y+.5*$h+.3*$this->FontSize,$txt);
             }
 
             if($this->ColorFlag) {
-                $s.=' Q';
+                $s.= ' Q';
             }
 
             if($link) {
@@ -745,16 +819,15 @@ class FPDF
             $this->_out($s);
         }
 
-        $this->lasth=$h;
-        if($ln>0) {
+        $this->lasth = $h;
+        if($ln > 0) {
             //Go to next line
-            $this->y+=$h;
-            if($ln==1) {
-                $this->x=$this->lMargin;
+            $this->y+= $h;
+            if($ln == 1) {
+                $this->x = $this->lMargin;
             }
-
         } else {
-            $this->x+=$w;
+            $this->x+= $w;
         }
 
     }
@@ -762,97 +835,102 @@ class FPDF
     function MultiCell($w, $h, $txt, $border=0, $align='J', $fill=false)
     {
         //Output text with automatic or explicit line breaks
-        $cw=&$this->CurrentFont['cw'];
-        if($w==0) {
-            $w=$this->w-$this->rMargin-$this->x;
+        $cw = &$this->CurrentFont['cw'];
+        if($w == 0) {
+            $w = $this->w-$this->rMargin-$this->x;
         }
 
-        $wmax=($w-2*$this->cMargin)*1000/$this->FontSize;
-        $s=str_replace("\r",'',$txt);
-        $nb=strlen($s);
-        if($nb>0 && $s[$nb-1]=="\n") {
+        $wmax = ($w-2*$this->cMargin)*1000/$this->FontSize;
+        $s    = str_replace("\r",'',$txt);
+        $nb   = strlen($s);
+
+        if($nb > 0 && $s[$nb-1] == "\n") {
             $nb--;
         }
 
-        $b=0;
+        $b = 0;
         if($border) {
-            if($border==1) {
-                $border='LTRB';
-                $b='LRT';
-                $b2='LR';
+            if($border == 1) {
+                $border = 'LTRB';
+                $b      = 'LRT';
+                $b2     = 'LR';
             } else {
-                $b2='';
-                if(strpos($border,'L')!==false) {
-                    $b2.='L';
+                $b2 = '';
+                if(strpos($border,'L') !== false) {
+                    $b2.= 'L';
                 }
 
-                if(strpos($border,'R')!==false) {
-                    $b2.='R';
+                if(strpos($border,'R') !== false) {
+                    $b2.= 'R';
                 }
 
-                $b=(strpos($border,'T')!==false) ? $b2.'T' : $b2;
+                $b = (strpos($border,'T') !== false) ? $b2.'T' : $b2;
             }
         }
-        $sep=-1;
-        $i=0;
-        $j=0;
-        $l=0;
-        $ns=0;
-        $nl=1;
+        $sep = -1;
+        $i   = 0;
+        $j   = 0;
+        $l   = 0;
+        $ns  = 0;
+        $nl  = 1;
         while($i<$nb) {
             //Get next character
-            $c=$s[$i];
-            if($c=="\n") {
+            $c = $s[$i];
+            if($c == "\n") {
                 //Explicit line break
                 if($this->ws>0) {
-                    $this->ws=0;
+                    $this->ws = 0;
                     $this->_out('0 Tw');
                 }
+
                 $this->Cell($w,$h,substr($s,$j,$i-$j),$b,2,$align,$fill);
+
                 $i++;
-                $sep=-1;
-                $j=$i;
-                $l=0;
-                $ns=0;
                 $nl++;
-                if($border && $nl==2) {
-                    $b=$b2;
+
+                $sep = -1;
+                $j   = $i;
+                $l   = 0;
+                $ns  = 0;
+
+                if($border && $nl == 2) {
+                    $b = $b2;
                 }
                 continue;
             }
-            if($c==' ') {
-                $sep=$i;
-                $ls=$l;
+            if($c == ' ') {
+                $sep = $i;
+                $ls  = $l;
                 $ns++;
             }
-            $l+=$cw[$c];
-            if($l>$wmax) {
+            $l+= $cw[$c];
+            if($l > $wmax) {
                 //Automatic line break
-                if($sep==-1) {
-                    if($i==$j) {
+                if($sep == -1) {
+                    if($i == $j) {
                         $i++;
                     }
 
-                    if($this->ws>0) {
-                        $this->ws=0;
+                    if($this->ws > 0) {
+                        $this->ws = 0;
                         $this->_out('0 Tw');
                     }
                     $this->Cell($w,$h,substr($s,$j,$i-$j),$b,2,$align,$fill);
                 } else {
-                    if($align=='J') {
-                        $this->ws=($ns>1) ? ($wmax-$ls)/1000*$this->FontSize/($ns-1) : 0;
+                    if($align == 'J') {
+                        $this->ws = ($ns>1) ? ($wmax - $ls) / 1000 * $this->FontSize / ($ns - 1) : 0;
                         $this->_out(sprintf('%.3F Tw',$this->ws*$this->k));
                     }
                     $this->Cell($w,$h,substr($s,$j,$sep-$j),$b,2,$align,$fill);
-                    $i=$sep+1;
+                    $i= $sep + 1;
                 }
-                $sep=-1;
-                $j=$i;
-                $l=0;
-                $ns=0;
+                $sep = -1;
+                $j   = $i;
+                $l   = 0;
+                $ns  = 0;
                 $nl++;
-                if($border && $nl==2) {
-                    $b=$b2;
+                if($border && $nl == 2) {
+                    $b = $b2;
                 }
 
             } else {
@@ -860,83 +938,83 @@ class FPDF
             }
         }
         //Last chunk
-        if($this->ws>0) {
-            $this->ws=0;
+        if($this->ws > 0) {
+            $this->ws = 0;
             $this->_out('0 Tw');
         }
-        if($border && strpos($border,'B')!==false) {
-            $b.='B';
+        if($border && strpos($border,'B') !== false) {
+            $b.= 'B';
         }
 
         $this->Cell($w,$h,substr($s,$j,$i-$j),$b,2,$align,$fill);
-        $this->x=$this->lMargin;
+        $this->x = $this->lMargin;
     }
 
     function Write($h, $txt, $link='')
     {
         //Output text in flowing mode
-        $cw=&$this->CurrentFont['cw'];
-        $w=$this->w-$this->rMargin-$this->x;
-        $wmax=($w-2*$this->cMargin)*1000/$this->FontSize;
-        $s=str_replace("\r",'',$txt);
-        $nb=strlen($s);
-        $sep=-1;
-        $i=0;
-        $j=0;
-        $l=0;
-        $nl=1;
-        while($i<$nb) {
+        $cw   = &$this->CurrentFont['cw'];
+        $w    = $this->w - $this->rMargin - $this->x;
+        $wmax = ($w - 2 * $this->cMargin) * 1000 / $this->FontSize;
+        $s    = str_replace("\r",'',$txt);
+        $nb   = strlen($s);
+        $sep  = -1;
+        $i    = 0;
+        $j    = 0;
+        $l    = 0;
+        $nl   = 1;
+        while($i < $nb) {
             //Get next character
-            $c=$s[$i];
-            if($c=="\n") {
+            $c = $s[$i];
+            if($c == "\n") {
                 //Explicit line break
                 $this->Cell($w,$h,substr($s,$j,$i-$j),0,2,'',0,$link);
                 $i++;
-                $sep=-1;
-                $j=$i;
-                $l=0;
-                if($nl==1) {
-                    $this->x=$this->lMargin;
-                    $w=$this->w-$this->rMargin-$this->x;
-                    $wmax=($w-2*$this->cMargin)*1000/$this->FontSize;
+                $sep = -1;
+                $j   = $i;
+                $l   = 0;
+                if($nl == 1) {
+                    $this->x = $this->lMargin;
+                    $w       = $this->w-$this->rMargin-$this->x;
+                    $wmax    = ($w - 2 * $this->cMargin) * 1000 / $this->FontSize;
                 }
                 $nl++;
                 continue;
             }
-            if($c==' ') {
-                $sep=$i;
+            if($c == ' ') {
+                $sep = $i;
             }
 
-            $l+=$cw[$c];
-            if($l>$wmax) {
+            $l+= $cw[$c];
+            if($l > $wmax) {
                 //Automatic line break
-                if($sep==-1) {
-                    if($this->x>$this->lMargin) {
+                if($sep == -1) {
+                    if($this->x > $this->lMargin) {
                         //Move to next line
-                        $this->x=$this->lMargin;
-                        $this->y+=$h;
-                        $w=$this->w-$this->rMargin-$this->x;
-                        $wmax=($w-2*$this->cMargin)*1000/$this->FontSize;
+                        $this->x = $this->lMargin;
+                        $this->y+= $h;
+                        $w       = $this->w - $this->rMargin - $this->x;
+                        $wmax    = ($w - 2 * $this->cMargin) * 1000 / $this->FontSize;
                         $i++;
                         $nl++;
                         continue;
                     }
-                    if($i==$j) {
+                    if($i == $j) {
                         $i++;
                     }
 
                     $this->Cell($w,$h,substr($s,$j,$i-$j),0,2,'',0,$link);
                 } else {
                     $this->Cell($w,$h,substr($s,$j,$sep-$j),0,2,'',0,$link);
-                    $i=$sep+1;
+                    $i = $sep + 1;
                 }
-                $sep=-1;
-                $j=$i;
-                $l=0;
-                if($nl==1) {
-                    $this->x=$this->lMargin;
-                    $w=$this->w-$this->rMargin-$this->x;
-                    $wmax=($w-2*$this->cMargin)*1000/$this->FontSize;
+                $sep = -1;
+                $j   = $i;
+                $l   = 0;
+                if($nl == 1) {
+                    $this->x = $this->lMargin;
+                    $w       = $this->w - $this->rMargin - $this->x;
+                    $wmax    = ($w - 2 * $this->cMargin) * 1000 / $this->FontSize;
                 }
                 $nl++;
             } else {
@@ -945,18 +1023,19 @@ class FPDF
 
         }
         //Last chunk
-        if($i!=$j)
-        $this->Cell($l/1000*$this->FontSize,$h,substr($s,$j),0,0,'',0,$link);
+        if($i!= $j){
+            $this->Cell($l/1000*$this->FontSize,$h,substr($s,$j),0,0,'',0,$link);
+        }
     }
 
     function Ln($h=null)
     {
         //Line feed; default value is last cell height
         $this->x=$this->lMargin;
-        if($h===null) {
-            $this->y+=$this->lasth;
+        if($h === null) {
+            $this->y+= $this->lasth;
         } else {
-            $this->y+=$h;
+            $this->y+= $h;
         }
     }
 
@@ -965,53 +1044,56 @@ class FPDF
         //Put an image on the page
         if(!isset($this->images[$file])) {
             //First use of this image, get info
-            if($type=='') {
-                $pos=strrpos($file,'.');
-                if(!$pos)
-                $this->Error('Image file has no extension and no type was specified: '.$file);
-                $type=substr($file,$pos+1);
+            if($type == '') {
+                $pos = strrpos($file,'.');
+                if(!$pos){
+                    $this->Error('Image file has no extension and no type was specified: '.$file);
+                }
+                $type = substr($file,$pos+1);
             }
-            $type=strtolower($type);
-            if($type=='jpeg') {
-                $type='jpg';
+            $type = strtolower($type);
+            if($type == 'jpeg') {
+                $type = 'jpg';
             }
 
-            $mtd='_parse'.$type;
+            $mtd = '_parse'.$type;
             if(!method_exists($this,$mtd)) {
                 $this->Error('Unsupported image type: '.$type);
             }
 
-            $info=$this->$mtd($file);
-            $info['i']=count($this->images)+1;
-            $this->images[$file]=$info;
+            $info                = $this->$mtd($file);
+            $info['i']           = count($this->images) + 1;
+            $this->images[$file] = $info;
         } else {
-            $info=$this->images[$file];
+            $info = $this->images[$file];
         }
 
         //Automatic width and height calculation if needed
-        if($w==0 && $h==0) {
+        if($w == 0 && $h == 0) {
             //Put image at 72 dpi
-            $w=$info['w']/$this->k;
-            $h=$info['h']/$this->k;
-        } elseif($w==0) {
-            $w=$h*$info['w']/$info['h'];
-        } elseif($h==0) {
-            $h=$w*$info['h']/$info['w'];
+            $w = $info['w'] / $this->k;
+            $h = $info['h'] / $this->k;
+        } elseif($w == 0) {
+            $w = $h * $info['w'] / $info['h'];
+        } elseif($h == 0) {
+            $h = $w*$info['h'] / $info['w'];
         }
 
         //Flowing mode
         if($y===null) {
             if($this->y+$h>$this->PageBreakTrigger && !$this->InHeader && !$this->InFooter && $this->AcceptPageBreak()) {
                 //Automatic page break
-                $x2=$this->x;
+                $x2 = $this->x;
+
                 $this->AddPage($this->CurOrientation,$this->CurPageFormat);
-                $this->x=$x2;
+
+                $this->x = $x2;
             }
-            $y=$this->y;
-            $this->y+=$h;
+            $y       = $this->y;
+            $this->y+= $h;
         }
-        if($x===null) {
-            $x=$this->x;
+        if($x === null) {
+            $x = $this->x;
         }
 
         $this->_out(sprintf('q %.2F 0 0 %.2F %.2F %.2F cm /I%d Do Q',$w*$this->k,$h*$this->k,$x*$this->k,($this->h-($y+$h))*$this->k,$info['i']));
@@ -1029,10 +1111,10 @@ class FPDF
     function SetX($x)
     {
         //Set x position
-        if($x>=0) {
-            $this->x=$x;
+        if($x >= 0) {
+            $this->x = $x;
         } else {
-            $this->x=$this->w+$x;
+            $this->x = $this->w + $x;
         }
 
     }
@@ -1046,11 +1128,11 @@ class FPDF
     function SetY($y)
     {
         //Set y position and reset x
-        $this->x=$this->lMargin;
-        if($y>=0) {
-            $this->y=$y;
+        $this->x = $this->lMargin;
+        if($y >= 0) {
+            $this->y = $y;
         } else {
-            $this->y=$this->h+$y;
+            $this->y = $this->h + $y;
         }
 
     }
@@ -1065,17 +1147,17 @@ class FPDF
     function Output($name='', $dest='')
     {
         //Output PDF to some destination
-        if($this->state<3) {
+        if($this->state < 3) {
             $this->Close();
         }
 
-        $dest=strtoupper($dest);
-        if($dest=='') {
-            if($name=='') {
-                $name='doc.pdf';
-                $dest='I';
+        $dest = strtoupper($dest);
+        if($dest == '') {
+            if($name == '') {
+                $name = 'doc.pdf';
+                $dest = 'I';
             } else {
-                $dest='F';
+                $dest = 'F';
             }
 
         }
@@ -1086,7 +1168,7 @@ class FPDF
                     $this->Error('Some data has already been output, can\'t send PDF file');
                 }
 
-                if(php_sapi_name()!='cli') {
+                if(php_sapi_name() != 'cli') {
                     //We send to a browser
                     header('Content-Type: application/pdf');
                     if(headers_sent()) {
@@ -1121,9 +1203,10 @@ class FPDF
                 break;
             case 'F':
                 //Save to local file
-                $f=fopen($name,'wb');
-                if(!$f)
-                $this->Error('Unable to create output file: '.$name);
+                $f = fopen($name,'wb');
+                if(!$f){
+                    $this->Error('Unable to create output file: '.$name);
+                }
                 fwrite($f,$this->buffer,strlen($this->buffer));
                 fclose($f);
                 break;
@@ -1864,3 +1947,6 @@ if(isset($_SERVER['HTTP_USER_AGENT']) && $_SERVER['HTTP_USER_AGENT']=='contype')
     header('Content-Type: application/pdf');
     exit;
 }
+
+
+?>
\ No newline at end of file
-- 
1.6.0.4

